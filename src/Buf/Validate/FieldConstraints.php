<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: buf/validate/validate.proto

namespace Buf\Validate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * FieldRules encapsulates the rules for each type of field. Depending on the
 * field, the correct set should be used to ensure proper validations.
 *
 * Generated from protobuf message <code>buf.validate.FieldConstraints</code>
 */
class FieldConstraints extends \Google\Protobuf\Internal\Message
{
    /**
     * `cel` is a repeated field used to represent a textual expression
     * in the Common Expression Language (CEL) syntax. For more information on
     * CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
     * ```proto
     * message MyMessage {
     *   // The field `value` must be greater than 42.
     *   optional int32 value = 1 [(buf.validate.field).cel = {
     *     id: "my_message.value",
     *     message: "value must be greater than 42",
     *     expression: "this > 42",
     *   }];
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .buf.validate.Constraint cel = 23 [json_name = "cel"];</code>
     */
    private $cel;
    /**
     * `skipped` is an optional boolean attribute that specifies that the
     * validation rules of this field should not be evaluated. If skipped is set to
     * true, any validation rules set for the field will be ignored.
     * ```proto
     * message MyMessage {
     *   // The field `value` must not be set.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).skipped = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool skipped = 24 [json_name = "skipped"];</code>
     */
    protected $skipped = false;
    /**
     * If `required` is true, the field must be populated. Field presence can be
     * described as "serialized in the wire format," which follows the following rules:
     * - the following "nullable" fields must be explicitly set to be considered present:
     *   - singular message fields (may be their empty value)
     *   - member fields of a oneof (may be their default value)
     *   - proto3 optional fields (may be their default value)
     *   - proto2 scalar fields
     * - proto3 scalar fields must be non-zero to be considered present
     * - repeated and map fields must be non-empty to be considered present
     * ```proto
     * message MyMessage {
     *   // The field `value` must be set to a non-null value.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool required = 25 [json_name = "required"];</code>
     */
    protected $required = false;
    /**
     * If `ignore_empty` is true and applied to a non-nullable field (see
     * `required` for more details), validation is skipped on the field if it is
     * the default or empty value. Adding `ignore_empty` to a "nullable" field is
     * a noop as these unset fields already skip validation (with the exception
     * of `required`).
     * ```proto
     * message MyRepeated {
     *   // The field `value` min_len rule is only applied if the field isn't empty.
     *   repeated string value = 1 [
     *     (buf.validate.field).ignore_empty = true,
     *     (buf.validate.field).min_len = 5
     *   ];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     */
    protected $ignore_empty = false;
    protected $type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\Buf\Validate\Constraint>|\Google\Protobuf\Internal\RepeatedField $cel
     *           `cel` is a repeated field used to represent a textual expression
     *           in the Common Expression Language (CEL) syntax. For more information on
     *           CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
     *           ```proto
     *           message MyMessage {
     *             // The field `value` must be greater than 42.
     *             optional int32 value = 1 [(buf.validate.field).cel = {
     *               id: "my_message.value",
     *               message: "value must be greater than 42",
     *               expression: "this > 42",
     *             }];
     *           }
     *           ```
     *     @type bool $skipped
     *           `skipped` is an optional boolean attribute that specifies that the
     *           validation rules of this field should not be evaluated. If skipped is set to
     *           true, any validation rules set for the field will be ignored.
     *           ```proto
     *           message MyMessage {
     *             // The field `value` must not be set.
     *             optional MyOtherMessage value = 1 [(buf.validate.field).skipped = true];
     *           }
     *           ```
     *     @type bool $required
     *           If `required` is true, the field must be populated. Field presence can be
     *           described as "serialized in the wire format," which follows the following rules:
     *           - the following "nullable" fields must be explicitly set to be considered present:
     *             - singular message fields (may be their empty value)
     *             - member fields of a oneof (may be their default value)
     *             - proto3 optional fields (may be their default value)
     *             - proto2 scalar fields
     *           - proto3 scalar fields must be non-zero to be considered present
     *           - repeated and map fields must be non-empty to be considered present
     *           ```proto
     *           message MyMessage {
     *             // The field `value` must be set to a non-null value.
     *             optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
     *           }
     *           ```
     *     @type bool $ignore_empty
     *           If `ignore_empty` is true and applied to a non-nullable field (see
     *           `required` for more details), validation is skipped on the field if it is
     *           the default or empty value. Adding `ignore_empty` to a "nullable" field is
     *           a noop as these unset fields already skip validation (with the exception
     *           of `required`).
     *           ```proto
     *           message MyRepeated {
     *             // The field `value` min_len rule is only applied if the field isn't empty.
     *             repeated string value = 1 [
     *               (buf.validate.field).ignore_empty = true,
     *               (buf.validate.field).min_len = 5
     *             ];
     *           }
     *           ```
     *     @type \Buf\Validate\FloatRules $float
     *           Scalar Field Types
     *     @type \Buf\Validate\DoubleRules $double
     *     @type \Buf\Validate\Int32Rules $int32
     *     @type \Buf\Validate\Int64Rules $int64
     *     @type \Buf\Validate\UInt32Rules $uint32
     *     @type \Buf\Validate\UInt64Rules $uint64
     *     @type \Buf\Validate\SInt32Rules $sint32
     *     @type \Buf\Validate\SInt64Rules $sint64
     *     @type \Buf\Validate\Fixed32Rules $fixed32
     *     @type \Buf\Validate\Fixed64Rules $fixed64
     *     @type \Buf\Validate\SFixed32Rules $sfixed32
     *     @type \Buf\Validate\SFixed64Rules $sfixed64
     *     @type \Buf\Validate\BoolRules $bool
     *     @type \Buf\Validate\StringRules $string
     *     @type \Buf\Validate\BytesRules $bytes
     *     @type \Buf\Validate\EnumRules $enum
     *           Complex Field Types
     *     @type \Buf\Validate\RepeatedRules $repeated
     *     @type \Buf\Validate\MapRules $map
     *     @type \Buf\Validate\AnyRules $any
     *           Well-Known Field Types
     *     @type \Buf\Validate\DurationRules $duration
     *     @type \Buf\Validate\TimestampRules $timestamp
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Buf\Validate\Validate::initOnce();
        parent::__construct($data);
    }

    /**
     * `cel` is a repeated field used to represent a textual expression
     * in the Common Expression Language (CEL) syntax. For more information on
     * CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
     * ```proto
     * message MyMessage {
     *   // The field `value` must be greater than 42.
     *   optional int32 value = 1 [(buf.validate.field).cel = {
     *     id: "my_message.value",
     *     message: "value must be greater than 42",
     *     expression: "this > 42",
     *   }];
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .buf.validate.Constraint cel = 23 [json_name = "cel"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getCel()
    {
        return $this->cel;
    }

    /**
     * `cel` is a repeated field used to represent a textual expression
     * in the Common Expression Language (CEL) syntax. For more information on
     * CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
     * ```proto
     * message MyMessage {
     *   // The field `value` must be greater than 42.
     *   optional int32 value = 1 [(buf.validate.field).cel = {
     *     id: "my_message.value",
     *     message: "value must be greater than 42",
     *     expression: "this > 42",
     *   }];
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .buf.validate.Constraint cel = 23 [json_name = "cel"];</code>
     * @param array<\Buf\Validate\Constraint>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setCel($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Buf\Validate\Constraint::class);
        $this->cel = $arr;

        return $this;
    }

    /**
     * `skipped` is an optional boolean attribute that specifies that the
     * validation rules of this field should not be evaluated. If skipped is set to
     * true, any validation rules set for the field will be ignored.
     * ```proto
     * message MyMessage {
     *   // The field `value` must not be set.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).skipped = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool skipped = 24 [json_name = "skipped"];</code>
     * @return bool
     */
    public function getSkipped()
    {
        return $this->skipped;
    }

    /**
     * `skipped` is an optional boolean attribute that specifies that the
     * validation rules of this field should not be evaluated. If skipped is set to
     * true, any validation rules set for the field will be ignored.
     * ```proto
     * message MyMessage {
     *   // The field `value` must not be set.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).skipped = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool skipped = 24 [json_name = "skipped"];</code>
     * @param bool $var
     * @return $this
     */
    public function setSkipped($var)
    {
        GPBUtil::checkBool($var);
        $this->skipped = $var;

        return $this;
    }

    /**
     * If `required` is true, the field must be populated. Field presence can be
     * described as "serialized in the wire format," which follows the following rules:
     * - the following "nullable" fields must be explicitly set to be considered present:
     *   - singular message fields (may be their empty value)
     *   - member fields of a oneof (may be their default value)
     *   - proto3 optional fields (may be their default value)
     *   - proto2 scalar fields
     * - proto3 scalar fields must be non-zero to be considered present
     * - repeated and map fields must be non-empty to be considered present
     * ```proto
     * message MyMessage {
     *   // The field `value` must be set to a non-null value.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool required = 25 [json_name = "required"];</code>
     * @return bool
     */
    public function getRequired()
    {
        return $this->required;
    }

    /**
     * If `required` is true, the field must be populated. Field presence can be
     * described as "serialized in the wire format," which follows the following rules:
     * - the following "nullable" fields must be explicitly set to be considered present:
     *   - singular message fields (may be their empty value)
     *   - member fields of a oneof (may be their default value)
     *   - proto3 optional fields (may be their default value)
     *   - proto2 scalar fields
     * - proto3 scalar fields must be non-zero to be considered present
     * - repeated and map fields must be non-empty to be considered present
     * ```proto
     * message MyMessage {
     *   // The field `value` must be set to a non-null value.
     *   optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool required = 25 [json_name = "required"];</code>
     * @param bool $var
     * @return $this
     */
    public function setRequired($var)
    {
        GPBUtil::checkBool($var);
        $this->required = $var;

        return $this;
    }

    /**
     * If `ignore_empty` is true and applied to a non-nullable field (see
     * `required` for more details), validation is skipped on the field if it is
     * the default or empty value. Adding `ignore_empty` to a "nullable" field is
     * a noop as these unset fields already skip validation (with the exception
     * of `required`).
     * ```proto
     * message MyRepeated {
     *   // The field `value` min_len rule is only applied if the field isn't empty.
     *   repeated string value = 1 [
     *     (buf.validate.field).ignore_empty = true,
     *     (buf.validate.field).min_len = 5
     *   ];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     * @return bool
     */
    public function getIgnoreEmpty()
    {
        return $this->ignore_empty;
    }

    /**
     * If `ignore_empty` is true and applied to a non-nullable field (see
     * `required` for more details), validation is skipped on the field if it is
     * the default or empty value. Adding `ignore_empty` to a "nullable" field is
     * a noop as these unset fields already skip validation (with the exception
     * of `required`).
     * ```proto
     * message MyRepeated {
     *   // The field `value` min_len rule is only applied if the field isn't empty.
     *   repeated string value = 1 [
     *     (buf.validate.field).ignore_empty = true,
     *     (buf.validate.field).min_len = 5
     *   ];
     * }
     * ```
     *
     * Generated from protobuf field <code>bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreEmpty($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_empty = $var;

        return $this;
    }

    /**
     * Scalar Field Types
     *
     * Generated from protobuf field <code>.buf.validate.FloatRules float = 1 [json_name = "float"];</code>
     * @return \Buf\Validate\FloatRules|null
     */
    public function getFloat()
    {
        return $this->readOneof(1);
    }

    public function hasFloat()
    {
        return $this->hasOneof(1);
    }

    /**
     * Scalar Field Types
     *
     * Generated from protobuf field <code>.buf.validate.FloatRules float = 1 [json_name = "float"];</code>
     * @param \Buf\Validate\FloatRules $var
     * @return $this
     */
    public function setFloat($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\FloatRules::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.DoubleRules double = 2 [json_name = "double"];</code>
     * @return \Buf\Validate\DoubleRules|null
     */
    public function getDouble()
    {
        return $this->readOneof(2);
    }

    public function hasDouble()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.DoubleRules double = 2 [json_name = "double"];</code>
     * @param \Buf\Validate\DoubleRules $var
     * @return $this
     */
    public function setDouble($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\DoubleRules::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Int32Rules int32 = 3 [json_name = "int32"];</code>
     * @return \Buf\Validate\Int32Rules|null
     */
    public function getInt32()
    {
        return $this->readOneof(3);
    }

    public function hasInt32()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Int32Rules int32 = 3 [json_name = "int32"];</code>
     * @param \Buf\Validate\Int32Rules $var
     * @return $this
     */
    public function setInt32($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\Int32Rules::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Int64Rules int64 = 4 [json_name = "int64"];</code>
     * @return \Buf\Validate\Int64Rules|null
     */
    public function getInt64()
    {
        return $this->readOneof(4);
    }

    public function hasInt64()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Int64Rules int64 = 4 [json_name = "int64"];</code>
     * @param \Buf\Validate\Int64Rules $var
     * @return $this
     */
    public function setInt64($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\Int64Rules::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.UInt32Rules uint32 = 5 [json_name = "uint32"];</code>
     * @return \Buf\Validate\UInt32Rules|null
     */
    public function getUint32()
    {
        return $this->readOneof(5);
    }

    public function hasUint32()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.UInt32Rules uint32 = 5 [json_name = "uint32"];</code>
     * @param \Buf\Validate\UInt32Rules $var
     * @return $this
     */
    public function setUint32($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\UInt32Rules::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.UInt64Rules uint64 = 6 [json_name = "uint64"];</code>
     * @return \Buf\Validate\UInt64Rules|null
     */
    public function getUint64()
    {
        return $this->readOneof(6);
    }

    public function hasUint64()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.UInt64Rules uint64 = 6 [json_name = "uint64"];</code>
     * @param \Buf\Validate\UInt64Rules $var
     * @return $this
     */
    public function setUint64($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\UInt64Rules::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SInt32Rules sint32 = 7 [json_name = "sint32"];</code>
     * @return \Buf\Validate\SInt32Rules|null
     */
    public function getSint32()
    {
        return $this->readOneof(7);
    }

    public function hasSint32()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SInt32Rules sint32 = 7 [json_name = "sint32"];</code>
     * @param \Buf\Validate\SInt32Rules $var
     * @return $this
     */
    public function setSint32($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\SInt32Rules::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SInt64Rules sint64 = 8 [json_name = "sint64"];</code>
     * @return \Buf\Validate\SInt64Rules|null
     */
    public function getSint64()
    {
        return $this->readOneof(8);
    }

    public function hasSint64()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SInt64Rules sint64 = 8 [json_name = "sint64"];</code>
     * @param \Buf\Validate\SInt64Rules $var
     * @return $this
     */
    public function setSint64($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\SInt64Rules::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Fixed32Rules fixed32 = 9 [json_name = "fixed32"];</code>
     * @return \Buf\Validate\Fixed32Rules|null
     */
    public function getFixed32()
    {
        return $this->readOneof(9);
    }

    public function hasFixed32()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Fixed32Rules fixed32 = 9 [json_name = "fixed32"];</code>
     * @param \Buf\Validate\Fixed32Rules $var
     * @return $this
     */
    public function setFixed32($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\Fixed32Rules::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Fixed64Rules fixed64 = 10 [json_name = "fixed64"];</code>
     * @return \Buf\Validate\Fixed64Rules|null
     */
    public function getFixed64()
    {
        return $this->readOneof(10);
    }

    public function hasFixed64()
    {
        return $this->hasOneof(10);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.Fixed64Rules fixed64 = 10 [json_name = "fixed64"];</code>
     * @param \Buf\Validate\Fixed64Rules $var
     * @return $this
     */
    public function setFixed64($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\Fixed64Rules::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SFixed32Rules sfixed32 = 11 [json_name = "sfixed32"];</code>
     * @return \Buf\Validate\SFixed32Rules|null
     */
    public function getSfixed32()
    {
        return $this->readOneof(11);
    }

    public function hasSfixed32()
    {
        return $this->hasOneof(11);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SFixed32Rules sfixed32 = 11 [json_name = "sfixed32"];</code>
     * @param \Buf\Validate\SFixed32Rules $var
     * @return $this
     */
    public function setSfixed32($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\SFixed32Rules::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SFixed64Rules sfixed64 = 12 [json_name = "sfixed64"];</code>
     * @return \Buf\Validate\SFixed64Rules|null
     */
    public function getSfixed64()
    {
        return $this->readOneof(12);
    }

    public function hasSfixed64()
    {
        return $this->hasOneof(12);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.SFixed64Rules sfixed64 = 12 [json_name = "sfixed64"];</code>
     * @param \Buf\Validate\SFixed64Rules $var
     * @return $this
     */
    public function setSfixed64($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\SFixed64Rules::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.BoolRules bool = 13 [json_name = "bool"];</code>
     * @return \Buf\Validate\BoolRules|null
     */
    public function getBool()
    {
        return $this->readOneof(13);
    }

    public function hasBool()
    {
        return $this->hasOneof(13);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.BoolRules bool = 13 [json_name = "bool"];</code>
     * @param \Buf\Validate\BoolRules $var
     * @return $this
     */
    public function setBool($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\BoolRules::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.StringRules string = 14 [json_name = "string"];</code>
     * @return \Buf\Validate\StringRules|null
     */
    public function getString()
    {
        return $this->readOneof(14);
    }

    public function hasString()
    {
        return $this->hasOneof(14);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.StringRules string = 14 [json_name = "string"];</code>
     * @param \Buf\Validate\StringRules $var
     * @return $this
     */
    public function setString($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\StringRules::class);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.BytesRules bytes = 15 [json_name = "bytes"];</code>
     * @return \Buf\Validate\BytesRules|null
     */
    public function getBytes()
    {
        return $this->readOneof(15);
    }

    public function hasBytes()
    {
        return $this->hasOneof(15);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.BytesRules bytes = 15 [json_name = "bytes"];</code>
     * @param \Buf\Validate\BytesRules $var
     * @return $this
     */
    public function setBytes($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\BytesRules::class);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * Complex Field Types
     *
     * Generated from protobuf field <code>.buf.validate.EnumRules enum = 16 [json_name = "enum"];</code>
     * @return \Buf\Validate\EnumRules|null
     */
    public function getEnum()
    {
        return $this->readOneof(16);
    }

    public function hasEnum()
    {
        return $this->hasOneof(16);
    }

    /**
     * Complex Field Types
     *
     * Generated from protobuf field <code>.buf.validate.EnumRules enum = 16 [json_name = "enum"];</code>
     * @param \Buf\Validate\EnumRules $var
     * @return $this
     */
    public function setEnum($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\EnumRules::class);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.RepeatedRules repeated = 18 [json_name = "repeated"];</code>
     * @return \Buf\Validate\RepeatedRules|null
     */
    public function getRepeated()
    {
        return $this->readOneof(18);
    }

    public function hasRepeated()
    {
        return $this->hasOneof(18);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.RepeatedRules repeated = 18 [json_name = "repeated"];</code>
     * @param \Buf\Validate\RepeatedRules $var
     * @return $this
     */
    public function setRepeated($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\RepeatedRules::class);
        $this->writeOneof(18, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.MapRules map = 19 [json_name = "map"];</code>
     * @return \Buf\Validate\MapRules|null
     */
    public function getMap()
    {
        return $this->readOneof(19);
    }

    public function hasMap()
    {
        return $this->hasOneof(19);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.MapRules map = 19 [json_name = "map"];</code>
     * @param \Buf\Validate\MapRules $var
     * @return $this
     */
    public function setMap($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\MapRules::class);
        $this->writeOneof(19, $var);

        return $this;
    }

    /**
     * Well-Known Field Types
     *
     * Generated from protobuf field <code>.buf.validate.AnyRules any = 20 [json_name = "any"];</code>
     * @return \Buf\Validate\AnyRules|null
     */
    public function getAny()
    {
        return $this->readOneof(20);
    }

    public function hasAny()
    {
        return $this->hasOneof(20);
    }

    /**
     * Well-Known Field Types
     *
     * Generated from protobuf field <code>.buf.validate.AnyRules any = 20 [json_name = "any"];</code>
     * @param \Buf\Validate\AnyRules $var
     * @return $this
     */
    public function setAny($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\AnyRules::class);
        $this->writeOneof(20, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.DurationRules duration = 21 [json_name = "duration"];</code>
     * @return \Buf\Validate\DurationRules|null
     */
    public function getDuration()
    {
        return $this->readOneof(21);
    }

    public function hasDuration()
    {
        return $this->hasOneof(21);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.DurationRules duration = 21 [json_name = "duration"];</code>
     * @param \Buf\Validate\DurationRules $var
     * @return $this
     */
    public function setDuration($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\DurationRules::class);
        $this->writeOneof(21, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.buf.validate.TimestampRules timestamp = 22 [json_name = "timestamp"];</code>
     * @return \Buf\Validate\TimestampRules|null
     */
    public function getTimestamp()
    {
        return $this->readOneof(22);
    }

    public function hasTimestamp()
    {
        return $this->hasOneof(22);
    }

    /**
     * Generated from protobuf field <code>.buf.validate.TimestampRules timestamp = 22 [json_name = "timestamp"];</code>
     * @param \Buf\Validate\TimestampRules $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Buf\Validate\TimestampRules::class);
        $this->writeOneof(22, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->whichOneof("type");
    }

}

