<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cerbos/cloud/logs/v1/logs.proto

namespace Cerbos\Cloud\Logs\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>cerbos.cloud.logs.v1.IngestResponse</code>
 */
class IngestResponse extends \Google\Protobuf\Internal\Message
{
    protected $status;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\GPBEmpty $success
     *     @type \Cerbos\Cloud\Logs\V1\IngestResponse\Backoff $backoff
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cerbos\Cloud\Logs\V1\Logs::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Empty success = 1 [json_name = "success"];</code>
     * @return \Google\Protobuf\GPBEmpty|null
     */
    public function getSuccess()
    {
        return $this->readOneof(1);
    }

    public function hasSuccess()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Empty success = 1 [json_name = "success"];</code>
     * @param \Google\Protobuf\GPBEmpty $var
     * @return $this
     */
    public function setSuccess($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\GPBEmpty::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.cerbos.cloud.logs.v1.IngestResponse.Backoff backoff = 2 [json_name = "backoff"];</code>
     * @return \Cerbos\Cloud\Logs\V1\IngestResponse\Backoff|null
     */
    public function getBackoff()
    {
        return $this->readOneof(2);
    }

    public function hasBackoff()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.cerbos.cloud.logs.v1.IngestResponse.Backoff backoff = 2 [json_name = "backoff"];</code>
     * @param \Cerbos\Cloud\Logs\V1\IngestResponse\Backoff $var
     * @return $this
     */
    public function setBackoff($var)
    {
        GPBUtil::checkMessage($var, \Cerbos\Cloud\Logs\V1\IngestResponse\Backoff::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getStatus()
    {
        return $this->whichOneof("status");
    }

}

