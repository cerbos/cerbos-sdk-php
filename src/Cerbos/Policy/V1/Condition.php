<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cerbos/policy/v1/policy.proto

namespace Cerbos\Policy\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cerbos.policy.v1.Condition</code>
 */
class Condition extends \Google\Protobuf\Internal\Message
{
    protected $condition;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Cerbos\Policy\V1\PBMatch $match
     *     @type string $script
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cerbos\Policy\V1\Policy::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.cerbos.policy.v1.Match match = 1 [json_name = "match"];</code>
     * @return \Cerbos\Policy\V1\PBMatch|null
     */
    public function getMatch()
    {
        return $this->readOneof(1);
    }

    public function hasMatch()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.cerbos.policy.v1.Match match = 1 [json_name = "match"];</code>
     * @param \Cerbos\Policy\V1\PBMatch $var
     * @return $this
     */
    public function setMatch($var)
    {
        GPBUtil::checkMessage($var, \Cerbos\Policy\V1\PBMatch::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>string script = 2 [json_name = "script"];</code>
     * @return string
     */
    public function getScript()
    {
        return $this->readOneof(2);
    }

    public function hasScript()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>string script = 2 [json_name = "script"];</code>
     * @param string $var
     * @return $this
     */
    public function setScript($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getCondition()
    {
        return $this->whichOneof("condition");
    }

}

