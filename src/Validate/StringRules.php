<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: validate/validate.proto

namespace Validate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * StringRules describe the constraints applied to `string` values
 *
 * Generated from protobuf message <code>validate.StringRules</code>
 */
class StringRules extends \Google\Protobuf\Internal\Message
{
    /**
     * Const specifies that this field must be exactly the specified value
     *
     * Generated from protobuf field <code>optional string const = 1 [json_name = "const"];</code>
     */
    protected $const = null;
    /**
     * Len specifies that this field must be the specified number of
     * characters (Unicode code points). Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 len = 19 [json_name = "len"];</code>
     */
    protected $len = null;
    /**
     * MinLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a minimum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 min_len = 2 [json_name = "minLen"];</code>
     */
    protected $min_len = null;
    /**
     * MaxLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a maximum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 max_len = 3 [json_name = "maxLen"];</code>
     */
    protected $max_len = null;
    /**
     * LenBytes specifies that this field must be the specified number of bytes
     *
     * Generated from protobuf field <code>optional uint64 len_bytes = 20 [json_name = "lenBytes"];</code>
     */
    protected $len_bytes = null;
    /**
     * MinBytes specifies that this field must be the specified number of bytes
     * at a minimum
     *
     * Generated from protobuf field <code>optional uint64 min_bytes = 4 [json_name = "minBytes"];</code>
     */
    protected $min_bytes = null;
    /**
     * MaxBytes specifies that this field must be the specified number of bytes
     * at a maximum
     *
     * Generated from protobuf field <code>optional uint64 max_bytes = 5 [json_name = "maxBytes"];</code>
     */
    protected $max_bytes = null;
    /**
     * Pattern specifes that this field must match against the specified
     * regular expression (RE2 syntax). The included expression should elide
     * any delimiters.
     *
     * Generated from protobuf field <code>optional string pattern = 6 [json_name = "pattern"];</code>
     */
    protected $pattern = null;
    /**
     * Prefix specifies that this field must have the specified substring at
     * the beginning of the string.
     *
     * Generated from protobuf field <code>optional string prefix = 7 [json_name = "prefix"];</code>
     */
    protected $prefix = null;
    /**
     * Suffix specifies that this field must have the specified substring at
     * the end of the string.
     *
     * Generated from protobuf field <code>optional string suffix = 8 [json_name = "suffix"];</code>
     */
    protected $suffix = null;
    /**
     * Contains specifies that this field must have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string contains = 9 [json_name = "contains"];</code>
     */
    protected $contains = null;
    /**
     * NotContains specifies that this field cannot have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string not_contains = 23 [json_name = "notContains"];</code>
     */
    protected $not_contains = null;
    /**
     * In specifies that this field must be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string in = 10 [json_name = "in"];</code>
     */
    private $in;
    /**
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string not_in = 11 [json_name = "notIn"];</code>
     */
    private $not_in;
    /**
     * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
     * strict header validation.
     * By default, this is true, and HTTP header validations are RFC-compliant.
     * Setting to false will enable a looser validations that only disallows
     * \r\n\0 characters, which can be used to bypass header matching rules.
     *
     * Generated from protobuf field <code>optional bool strict = 25 [json_name = "strict"];</code>
     */
    protected $strict = null;
    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>optional bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     */
    protected $ignore_empty = null;
    protected $well_known;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $const
     *           Const specifies that this field must be exactly the specified value
     *     @type int|string $len
     *           Len specifies that this field must be the specified number of
     *           characters (Unicode code points). Note that the number of
     *           characters may differ from the number of bytes in the string.
     *     @type int|string $min_len
     *           MinLen specifies that this field must be the specified number of
     *           characters (Unicode code points) at a minimum. Note that the number of
     *           characters may differ from the number of bytes in the string.
     *     @type int|string $max_len
     *           MaxLen specifies that this field must be the specified number of
     *           characters (Unicode code points) at a maximum. Note that the number of
     *           characters may differ from the number of bytes in the string.
     *     @type int|string $len_bytes
     *           LenBytes specifies that this field must be the specified number of bytes
     *     @type int|string $min_bytes
     *           MinBytes specifies that this field must be the specified number of bytes
     *           at a minimum
     *     @type int|string $max_bytes
     *           MaxBytes specifies that this field must be the specified number of bytes
     *           at a maximum
     *     @type string $pattern
     *           Pattern specifes that this field must match against the specified
     *           regular expression (RE2 syntax). The included expression should elide
     *           any delimiters.
     *     @type string $prefix
     *           Prefix specifies that this field must have the specified substring at
     *           the beginning of the string.
     *     @type string $suffix
     *           Suffix specifies that this field must have the specified substring at
     *           the end of the string.
     *     @type string $contains
     *           Contains specifies that this field must have the specified substring
     *           anywhere in the string.
     *     @type string $not_contains
     *           NotContains specifies that this field cannot have the specified substring
     *           anywhere in the string.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $in
     *           In specifies that this field must be equal to one of the specified
     *           values
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $not_in
     *           NotIn specifies that this field cannot be equal to one of the specified
     *           values
     *     @type bool $email
     *           Email specifies that the field must be a valid email address as
     *           defined by RFC 5322
     *     @type bool $hostname
     *           Hostname specifies that the field must be a valid hostname as
     *           defined by RFC 1034. This constraint does not support
     *           internationalized domain names (IDNs).
     *     @type bool $ip
     *           Ip specifies that the field must be a valid IP (v4 or v6) address.
     *           Valid IPv6 addresses should not include surrounding square brackets.
     *     @type bool $ipv4
     *           Ipv4 specifies that the field must be a valid IPv4 address.
     *     @type bool $ipv6
     *           Ipv6 specifies that the field must be a valid IPv6 address. Valid
     *           IPv6 addresses should not include surrounding square brackets.
     *     @type bool $uri
     *           Uri specifies that the field must be a valid, absolute URI as defined
     *           by RFC 3986
     *     @type bool $uri_ref
     *           UriRef specifies that the field must be a valid URI as defined by RFC
     *           3986 and may be relative or absolute.
     *     @type bool $address
     *           Address specifies that the field must be either a valid hostname as
     *           defined by RFC 1034 (which does not support internationalized domain
     *           names or IDNs), or it can be a valid IP (v4 or v6).
     *     @type bool $uuid
     *           Uuid specifies that the field must be a valid UUID as defined by
     *           RFC 4122
     *     @type int $well_known_regex
     *           WellKnownRegex specifies a common well known pattern defined as a regex.
     *     @type bool $strict
     *           This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
     *           strict header validation.
     *           By default, this is true, and HTTP header validations are RFC-compliant.
     *           Setting to false will enable a looser validations that only disallows
     *           \r\n\0 characters, which can be used to bypass header matching rules.
     *     @type bool $ignore_empty
     *           IgnoreEmpty specifies that the validation rules of this field should be
     *           evaluated only if the field is not empty
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Validate\Validate::initOnce();
        parent::__construct($data);
    }

    /**
     * Const specifies that this field must be exactly the specified value
     *
     * Generated from protobuf field <code>optional string const = 1 [json_name = "const"];</code>
     * @return string
     */
    public function getConst()
    {
        return isset($this->const) ? $this->const : '';
    }

    public function hasConst()
    {
        return isset($this->const);
    }

    public function clearConst()
    {
        unset($this->const);
    }

    /**
     * Const specifies that this field must be exactly the specified value
     *
     * Generated from protobuf field <code>optional string const = 1 [json_name = "const"];</code>
     * @param string $var
     * @return $this
     */
    public function setConst($var)
    {
        GPBUtil::checkString($var, True);
        $this->const = $var;

        return $this;
    }

    /**
     * Len specifies that this field must be the specified number of
     * characters (Unicode code points). Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 len = 19 [json_name = "len"];</code>
     * @return int|string
     */
    public function getLen()
    {
        return isset($this->len) ? $this->len : 0;
    }

    public function hasLen()
    {
        return isset($this->len);
    }

    public function clearLen()
    {
        unset($this->len);
    }

    /**
     * Len specifies that this field must be the specified number of
     * characters (Unicode code points). Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 len = 19 [json_name = "len"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setLen($var)
    {
        GPBUtil::checkUint64($var);
        $this->len = $var;

        return $this;
    }

    /**
     * MinLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a minimum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 min_len = 2 [json_name = "minLen"];</code>
     * @return int|string
     */
    public function getMinLen()
    {
        return isset($this->min_len) ? $this->min_len : 0;
    }

    public function hasMinLen()
    {
        return isset($this->min_len);
    }

    public function clearMinLen()
    {
        unset($this->min_len);
    }

    /**
     * MinLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a minimum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 min_len = 2 [json_name = "minLen"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinLen($var)
    {
        GPBUtil::checkUint64($var);
        $this->min_len = $var;

        return $this;
    }

    /**
     * MaxLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a maximum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 max_len = 3 [json_name = "maxLen"];</code>
     * @return int|string
     */
    public function getMaxLen()
    {
        return isset($this->max_len) ? $this->max_len : 0;
    }

    public function hasMaxLen()
    {
        return isset($this->max_len);
    }

    public function clearMaxLen()
    {
        unset($this->max_len);
    }

    /**
     * MaxLen specifies that this field must be the specified number of
     * characters (Unicode code points) at a maximum. Note that the number of
     * characters may differ from the number of bytes in the string.
     *
     * Generated from protobuf field <code>optional uint64 max_len = 3 [json_name = "maxLen"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxLen($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_len = $var;

        return $this;
    }

    /**
     * LenBytes specifies that this field must be the specified number of bytes
     *
     * Generated from protobuf field <code>optional uint64 len_bytes = 20 [json_name = "lenBytes"];</code>
     * @return int|string
     */
    public function getLenBytes()
    {
        return isset($this->len_bytes) ? $this->len_bytes : 0;
    }

    public function hasLenBytes()
    {
        return isset($this->len_bytes);
    }

    public function clearLenBytes()
    {
        unset($this->len_bytes);
    }

    /**
     * LenBytes specifies that this field must be the specified number of bytes
     *
     * Generated from protobuf field <code>optional uint64 len_bytes = 20 [json_name = "lenBytes"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setLenBytes($var)
    {
        GPBUtil::checkUint64($var);
        $this->len_bytes = $var;

        return $this;
    }

    /**
     * MinBytes specifies that this field must be the specified number of bytes
     * at a minimum
     *
     * Generated from protobuf field <code>optional uint64 min_bytes = 4 [json_name = "minBytes"];</code>
     * @return int|string
     */
    public function getMinBytes()
    {
        return isset($this->min_bytes) ? $this->min_bytes : 0;
    }

    public function hasMinBytes()
    {
        return isset($this->min_bytes);
    }

    public function clearMinBytes()
    {
        unset($this->min_bytes);
    }

    /**
     * MinBytes specifies that this field must be the specified number of bytes
     * at a minimum
     *
     * Generated from protobuf field <code>optional uint64 min_bytes = 4 [json_name = "minBytes"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinBytes($var)
    {
        GPBUtil::checkUint64($var);
        $this->min_bytes = $var;

        return $this;
    }

    /**
     * MaxBytes specifies that this field must be the specified number of bytes
     * at a maximum
     *
     * Generated from protobuf field <code>optional uint64 max_bytes = 5 [json_name = "maxBytes"];</code>
     * @return int|string
     */
    public function getMaxBytes()
    {
        return isset($this->max_bytes) ? $this->max_bytes : 0;
    }

    public function hasMaxBytes()
    {
        return isset($this->max_bytes);
    }

    public function clearMaxBytes()
    {
        unset($this->max_bytes);
    }

    /**
     * MaxBytes specifies that this field must be the specified number of bytes
     * at a maximum
     *
     * Generated from protobuf field <code>optional uint64 max_bytes = 5 [json_name = "maxBytes"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxBytes($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_bytes = $var;

        return $this;
    }

    /**
     * Pattern specifes that this field must match against the specified
     * regular expression (RE2 syntax). The included expression should elide
     * any delimiters.
     *
     * Generated from protobuf field <code>optional string pattern = 6 [json_name = "pattern"];</code>
     * @return string
     */
    public function getPattern()
    {
        return isset($this->pattern) ? $this->pattern : '';
    }

    public function hasPattern()
    {
        return isset($this->pattern);
    }

    public function clearPattern()
    {
        unset($this->pattern);
    }

    /**
     * Pattern specifes that this field must match against the specified
     * regular expression (RE2 syntax). The included expression should elide
     * any delimiters.
     *
     * Generated from protobuf field <code>optional string pattern = 6 [json_name = "pattern"];</code>
     * @param string $var
     * @return $this
     */
    public function setPattern($var)
    {
        GPBUtil::checkString($var, True);
        $this->pattern = $var;

        return $this;
    }

    /**
     * Prefix specifies that this field must have the specified substring at
     * the beginning of the string.
     *
     * Generated from protobuf field <code>optional string prefix = 7 [json_name = "prefix"];</code>
     * @return string
     */
    public function getPrefix()
    {
        return isset($this->prefix) ? $this->prefix : '';
    }

    public function hasPrefix()
    {
        return isset($this->prefix);
    }

    public function clearPrefix()
    {
        unset($this->prefix);
    }

    /**
     * Prefix specifies that this field must have the specified substring at
     * the beginning of the string.
     *
     * Generated from protobuf field <code>optional string prefix = 7 [json_name = "prefix"];</code>
     * @param string $var
     * @return $this
     */
    public function setPrefix($var)
    {
        GPBUtil::checkString($var, True);
        $this->prefix = $var;

        return $this;
    }

    /**
     * Suffix specifies that this field must have the specified substring at
     * the end of the string.
     *
     * Generated from protobuf field <code>optional string suffix = 8 [json_name = "suffix"];</code>
     * @return string
     */
    public function getSuffix()
    {
        return isset($this->suffix) ? $this->suffix : '';
    }

    public function hasSuffix()
    {
        return isset($this->suffix);
    }

    public function clearSuffix()
    {
        unset($this->suffix);
    }

    /**
     * Suffix specifies that this field must have the specified substring at
     * the end of the string.
     *
     * Generated from protobuf field <code>optional string suffix = 8 [json_name = "suffix"];</code>
     * @param string $var
     * @return $this
     */
    public function setSuffix($var)
    {
        GPBUtil::checkString($var, True);
        $this->suffix = $var;

        return $this;
    }

    /**
     * Contains specifies that this field must have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string contains = 9 [json_name = "contains"];</code>
     * @return string
     */
    public function getContains()
    {
        return isset($this->contains) ? $this->contains : '';
    }

    public function hasContains()
    {
        return isset($this->contains);
    }

    public function clearContains()
    {
        unset($this->contains);
    }

    /**
     * Contains specifies that this field must have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string contains = 9 [json_name = "contains"];</code>
     * @param string $var
     * @return $this
     */
    public function setContains($var)
    {
        GPBUtil::checkString($var, True);
        $this->contains = $var;

        return $this;
    }

    /**
     * NotContains specifies that this field cannot have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string not_contains = 23 [json_name = "notContains"];</code>
     * @return string
     */
    public function getNotContains()
    {
        return isset($this->not_contains) ? $this->not_contains : '';
    }

    public function hasNotContains()
    {
        return isset($this->not_contains);
    }

    public function clearNotContains()
    {
        unset($this->not_contains);
    }

    /**
     * NotContains specifies that this field cannot have the specified substring
     * anywhere in the string.
     *
     * Generated from protobuf field <code>optional string not_contains = 23 [json_name = "notContains"];</code>
     * @param string $var
     * @return $this
     */
    public function setNotContains($var)
    {
        GPBUtil::checkString($var, True);
        $this->not_contains = $var;

        return $this;
    }

    /**
     * In specifies that this field must be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string in = 10 [json_name = "in"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getIn()
    {
        return $this->in;
    }

    /**
     * In specifies that this field must be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string in = 10 [json_name = "in"];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setIn($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->in = $arr;

        return $this;
    }

    /**
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string not_in = 11 [json_name = "notIn"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getNotIn()
    {
        return $this->not_in;
    }

    /**
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     *
     * Generated from protobuf field <code>repeated string not_in = 11 [json_name = "notIn"];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setNotIn($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->not_in = $arr;

        return $this;
    }

    /**
     * Email specifies that the field must be a valid email address as
     * defined by RFC 5322
     *
     * Generated from protobuf field <code>bool email = 12 [json_name = "email"];</code>
     * @return bool
     */
    public function getEmail()
    {
        return $this->readOneof(12);
    }

    public function hasEmail()
    {
        return $this->hasOneof(12);
    }

    /**
     * Email specifies that the field must be a valid email address as
     * defined by RFC 5322
     *
     * Generated from protobuf field <code>bool email = 12 [json_name = "email"];</code>
     * @param bool $var
     * @return $this
     */
    public function setEmail($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Hostname specifies that the field must be a valid hostname as
     * defined by RFC 1034. This constraint does not support
     * internationalized domain names (IDNs).
     *
     * Generated from protobuf field <code>bool hostname = 13 [json_name = "hostname"];</code>
     * @return bool
     */
    public function getHostname()
    {
        return $this->readOneof(13);
    }

    public function hasHostname()
    {
        return $this->hasOneof(13);
    }

    /**
     * Hostname specifies that the field must be a valid hostname as
     * defined by RFC 1034. This constraint does not support
     * internationalized domain names (IDNs).
     *
     * Generated from protobuf field <code>bool hostname = 13 [json_name = "hostname"];</code>
     * @param bool $var
     * @return $this
     */
    public function setHostname($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Ip specifies that the field must be a valid IP (v4 or v6) address.
     * Valid IPv6 addresses should not include surrounding square brackets.
     *
     * Generated from protobuf field <code>bool ip = 14 [json_name = "ip"];</code>
     * @return bool
     */
    public function getIp()
    {
        return $this->readOneof(14);
    }

    public function hasIp()
    {
        return $this->hasOneof(14);
    }

    /**
     * Ip specifies that the field must be a valid IP (v4 or v6) address.
     * Valid IPv6 addresses should not include surrounding square brackets.
     *
     * Generated from protobuf field <code>bool ip = 14 [json_name = "ip"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIp($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * Ipv4 specifies that the field must be a valid IPv4 address.
     *
     * Generated from protobuf field <code>bool ipv4 = 15 [json_name = "ipv4"];</code>
     * @return bool
     */
    public function getIpv4()
    {
        return $this->readOneof(15);
    }

    public function hasIpv4()
    {
        return $this->hasOneof(15);
    }

    /**
     * Ipv4 specifies that the field must be a valid IPv4 address.
     *
     * Generated from protobuf field <code>bool ipv4 = 15 [json_name = "ipv4"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIpv4($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * Ipv6 specifies that the field must be a valid IPv6 address. Valid
     * IPv6 addresses should not include surrounding square brackets.
     *
     * Generated from protobuf field <code>bool ipv6 = 16 [json_name = "ipv6"];</code>
     * @return bool
     */
    public function getIpv6()
    {
        return $this->readOneof(16);
    }

    public function hasIpv6()
    {
        return $this->hasOneof(16);
    }

    /**
     * Ipv6 specifies that the field must be a valid IPv6 address. Valid
     * IPv6 addresses should not include surrounding square brackets.
     *
     * Generated from protobuf field <code>bool ipv6 = 16 [json_name = "ipv6"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIpv6($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     * Uri specifies that the field must be a valid, absolute URI as defined
     * by RFC 3986
     *
     * Generated from protobuf field <code>bool uri = 17 [json_name = "uri"];</code>
     * @return bool
     */
    public function getUri()
    {
        return $this->readOneof(17);
    }

    public function hasUri()
    {
        return $this->hasOneof(17);
    }

    /**
     * Uri specifies that the field must be a valid, absolute URI as defined
     * by RFC 3986
     *
     * Generated from protobuf field <code>bool uri = 17 [json_name = "uri"];</code>
     * @param bool $var
     * @return $this
     */
    public function setUri($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(17, $var);

        return $this;
    }

    /**
     * UriRef specifies that the field must be a valid URI as defined by RFC
     * 3986 and may be relative or absolute.
     *
     * Generated from protobuf field <code>bool uri_ref = 18 [json_name = "uriRef"];</code>
     * @return bool
     */
    public function getUriRef()
    {
        return $this->readOneof(18);
    }

    public function hasUriRef()
    {
        return $this->hasOneof(18);
    }

    /**
     * UriRef specifies that the field must be a valid URI as defined by RFC
     * 3986 and may be relative or absolute.
     *
     * Generated from protobuf field <code>bool uri_ref = 18 [json_name = "uriRef"];</code>
     * @param bool $var
     * @return $this
     */
    public function setUriRef($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(18, $var);

        return $this;
    }

    /**
     * Address specifies that the field must be either a valid hostname as
     * defined by RFC 1034 (which does not support internationalized domain
     * names or IDNs), or it can be a valid IP (v4 or v6).
     *
     * Generated from protobuf field <code>bool address = 21 [json_name = "address"];</code>
     * @return bool
     */
    public function getAddress()
    {
        return $this->readOneof(21);
    }

    public function hasAddress()
    {
        return $this->hasOneof(21);
    }

    /**
     * Address specifies that the field must be either a valid hostname as
     * defined by RFC 1034 (which does not support internationalized domain
     * names or IDNs), or it can be a valid IP (v4 or v6).
     *
     * Generated from protobuf field <code>bool address = 21 [json_name = "address"];</code>
     * @param bool $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(21, $var);

        return $this;
    }

    /**
     * Uuid specifies that the field must be a valid UUID as defined by
     * RFC 4122
     *
     * Generated from protobuf field <code>bool uuid = 22 [json_name = "uuid"];</code>
     * @return bool
     */
    public function getUuid()
    {
        return $this->readOneof(22);
    }

    public function hasUuid()
    {
        return $this->hasOneof(22);
    }

    /**
     * Uuid specifies that the field must be a valid UUID as defined by
     * RFC 4122
     *
     * Generated from protobuf field <code>bool uuid = 22 [json_name = "uuid"];</code>
     * @param bool $var
     * @return $this
     */
    public function setUuid($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(22, $var);

        return $this;
    }

    /**
     * WellKnownRegex specifies a common well known pattern defined as a regex.
     *
     * Generated from protobuf field <code>.validate.KnownRegex well_known_regex = 24 [json_name = "wellKnownRegex"];</code>
     * @return int
     */
    public function getWellKnownRegex()
    {
        return $this->readOneof(24);
    }

    public function hasWellKnownRegex()
    {
        return $this->hasOneof(24);
    }

    /**
     * WellKnownRegex specifies a common well known pattern defined as a regex.
     *
     * Generated from protobuf field <code>.validate.KnownRegex well_known_regex = 24 [json_name = "wellKnownRegex"];</code>
     * @param int $var
     * @return $this
     */
    public function setWellKnownRegex($var)
    {
        GPBUtil::checkEnum($var, \Validate\KnownRegex::class);
        $this->writeOneof(24, $var);

        return $this;
    }

    /**
     * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
     * strict header validation.
     * By default, this is true, and HTTP header validations are RFC-compliant.
     * Setting to false will enable a looser validations that only disallows
     * \r\n\0 characters, which can be used to bypass header matching rules.
     *
     * Generated from protobuf field <code>optional bool strict = 25 [json_name = "strict"];</code>
     * @return bool
     */
    public function getStrict()
    {
        return isset($this->strict) ? $this->strict : false;
    }

    public function hasStrict()
    {
        return isset($this->strict);
    }

    public function clearStrict()
    {
        unset($this->strict);
    }

    /**
     * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
     * strict header validation.
     * By default, this is true, and HTTP header validations are RFC-compliant.
     * Setting to false will enable a looser validations that only disallows
     * \r\n\0 characters, which can be used to bypass header matching rules.
     *
     * Generated from protobuf field <code>optional bool strict = 25 [json_name = "strict"];</code>
     * @param bool $var
     * @return $this
     */
    public function setStrict($var)
    {
        GPBUtil::checkBool($var);
        $this->strict = $var;

        return $this;
    }

    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>optional bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     * @return bool
     */
    public function getIgnoreEmpty()
    {
        return isset($this->ignore_empty) ? $this->ignore_empty : false;
    }

    public function hasIgnoreEmpty()
    {
        return isset($this->ignore_empty);
    }

    public function clearIgnoreEmpty()
    {
        unset($this->ignore_empty);
    }

    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>optional bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreEmpty($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_empty = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getWellKnown()
    {
        return $this->whichOneof("well_known");
    }

}

